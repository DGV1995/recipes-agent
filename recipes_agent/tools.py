import base64
import json

from langchain_core.exceptions import OutputParserException
from langchain_core.tools import tool
from openai import OpenAI
from pydantic import ValidationError
from supabase import create_client

from recipes_agent.constants import IMAGES_URL, SUPABASE_KEY, SUPABASE_URL
from recipes_agent.utils import parse_recipe

supabase = create_client(supabase_url=SUPABASE_URL, supabase_key=SUPABASE_KEY)
openai = OpenAI()


@tool(description="Generates a recipe")
def generate_recipe(details: str) -> dict:
    """
    Generates a recipe


    Args
    ----
    details: str
        The details of the recipe to be generated.

    Returns
    -------
    dict
        The generated recipe dictionary
    """

    prompt = (
        """
    Crea una receta, siguiendo las siguientes instrucciones:
    - El nombre de la receta debe ser conciso y descriptivo, usando solo alimentos relevantes.
    - Los valores extraídos deben estar traducidos al español de España.
    - No pongas saltos de línea de tu respuesta. Debe ir todo el texto en una sola línea.
    - El nombre de la receta sólo debe tener mayúscula la primera letra.
    - Tu respuesta debe tener el siguiente formato:
    
    name: comida,
    ingredients:[
        name: str,
        qty: int | float, (cantidad)
        uom: str (unidad de medida)
    ],
    cooking_time: int (minutes)
    instructions: [
        Instrucción (sin número),
        Instrucción, 
        ...
    ],
    category: categoría,
    types: [
        tipo1,
        tipo2,
        ...
    ],
    image_url: str
    macros:
        proteins:
            qty: int, (cantidad)
            uom: str, (unidad de medida)
        carbs: 
            qty: int,
            uom: str,
        fats:
            qty: int,
            uom: str,
        calories:
            qty: int,
            uom: str,
        
    """
        + f"\nLa receta que debes crear es la siguiente: '{details}'"
    )

    response = openai.chat.completions.create(
        model="gpt-4.1-nano", messages=[{"role": "user", "content": prompt}]
    )

    content = response.choices[0].message.content

    try:
        data = parse_recipe(content)
        return data
    except (json.JSONDecodeError, ValidationError, ValueError) as e:
        raise OutputParserException(f"Error al validar receta: {str(e)}")


@tool(description="Generates a realistic picture and uploads it to the database")
def generate_recipe_image(recipe_name: str) -> str:
    """
    Creates a realistic image from a recipe.

    Args
    ----
    recipe_name: str
        The name of the recipe to be generated, coming from 'generate_recipe' return object

    Returns
    -------
    str
        The URL of the generated image
    """
    return "https://nzcrspzqtgrubcpiwpxc.supabase.co/storage/v1/object/public/images//avena%20con%20claras,%20chocolate%20y%20almendras.png"

    response = openai.images.generate(
        model="dall-e-3",
        prompt=f"Crea una imagen realista de la siguiente receta: '{recipe_name}'",
        n=1,
        response_format="b64_json",
        size="1024x1024",
    )

    image_base64 = response.data[0].b64_json
    image_bytes = base64.b64decode(image_base64)

    recipe_name = recipe_name.lower().replace(" ", "-")
    file_name = f"generated/{recipe_name}.png"

    supabase.storage.from_("images").upload(file=image_bytes, path=file_name)

    image_url = f"{IMAGES_URL}/{file_name}"
    return image_url


@tool(description="Uploads a complete recipe (with its image) to the database.")
def upload_recipe(recipe: dict, image_url: str) -> dict:
    """
    Args
    ----
    recipe: dict
        Dictionary of the recipe generated by 'generate_recipe' tool
    image_url: str
        URL string generated by 'generate_recipe_image' tool

    Returns
    -------
    dict:
        The response dictionary
    """
    recipe["image_url"] = image_url

    # TODO: resume recipe for recipe_resume field

    supabase.from_("recipes").insert(recipe).execute()
    return {
        "status": "success",
        "recipe_name": recipe["name"],
        "image_url": image_url,
    }


TOOLS = [generate_recipe, generate_recipe_image, upload_recipe]
