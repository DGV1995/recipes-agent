from dotenv import load_dotenv
from langchain_core.messages import HumanMessage
from langchain_core.messages.system import SystemMessage
from langchain_openai import ChatOpenAI
from langgraph.graph import START, MessagesState, StateGraph
from langgraph.prebuilt import ToolNode, tools_condition

from recipes_agent.tools import TOOLS

load_dotenv()

llm = ChatOpenAI(model="gpt-4.1-nano")
llm_with_tools = llm.bind_tools(TOOLS)


def assistant(state: MessagesState):
    sys_msg = SystemMessage(
        content="""
        You are an expert assistant in healthy, high-protein cooking. You have access to the following tools to help you generate, illustrate, and upload recipes to a database.

Tools available:

1. generate_recipe: Creates a complete and structured recipe in Spanish. It requires a short textual description of the desired recipe (e.g., "vegan high-protein recipe").

2. generate_recipe_image: Generates a realistic image of a recipe based on its exact name (as generated by generate_recipe). It returns an image URL.

3. upload_recipe: Uploads the full recipe along with the image URL to the database.

Follow this sequence when helping the user:
- First, call `generate_recipe` using the description provided by the user.
- Second, call `generate_recipe_image` with the exact recipe name from the previous step.
- Third, call `upload_recipe` using the full recipe data, returned by 'generate_recipe' tool, and the image URL, returned by 'generate_recipe_image' tool.

Wait for each tool’s output before proceeding to the next one.
Do not assume or fabricate values. Use only the outputs from previous steps.
Do not ask for continuing with other processes, just continue the flow for completing the entire process."""
    )

    return {"messages": [llm_with_tools.invoke([sys_msg] + state["messages"])]}


def build_graph():
    builder = StateGraph(MessagesState)

    # Nodes
    builder.add_node("assistant", assistant)
    builder.add_node("tools", ToolNode(TOOLS))

    # Edges
    builder.add_edge(START, "assistant")
    builder.add_conditional_edges("assistant", tools_condition)
    builder.add_edge("tools", "assistant")

    return builder.compile()


def main():
    graph = build_graph()

    input = [
        HumanMessage(
            content="Dame una receta vegana, crea su imagen y súbela a la base de datos."
        )
    ]
    result = graph.invoke({"messages": input})

    for message in result["messages"]:
        message.pretty_print()


if __name__ == "__main__":
    main()
